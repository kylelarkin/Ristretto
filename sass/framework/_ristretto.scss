/* SCSS Framework boilerplate from Ristretto: https://github.com/kylelarkin/ristretto */
@use "sass:math";

// -------------------------------------------------
// Ristretto Bourbon Imports
// ---------------------------------------------- */
@import "grid";

// -------------------------------------------------
// Ristretto Variables
// ---------------------------------------------- */
@import "variables";

// -------------------------------------------------
// Ristretto Resets
// ---------------------------------------------- */
* { box-sizing: border-box; }

// -------------------------------------------------
// Custom Text Selection Setup
// ---------------------------------------------- */
body,select,input,textarea {
  color:#333;
}
// Custom text-selection colors (remove any text shadows:twitter.com/miketaylr/status/12228805301)
::selection {
  background:$highlight-color;
  color:#000;
  text-shadow:none;
}

a:link {
  -webkit-tap-highlight-color: transparent;
}


// -------------------------------------------------
// Ristretto Mixins
// ---------------------------------------------- */

// Remove UL Styling
@mixin ul-reset {
  list-style: none;
  margin: 0;
  padding-left: 0;
}

@mixin transition {
  transition: all $ani_speed ease-in-out;
}

@mixin maxwidth {
  max-width: 880px;
}

// Hyphenation (FF compatible)
@mixin hyphenation() {
  // -ms-word-break: break-all;
  // word-break: break-all;
  word-break: break-word;
  -webkit-hyphens: auto;
  -moz-hyphens: auto;
  hyphens: auto;
}

// Center element vertically without knowing height (IE9+) via http://zerosixthree.se/vertical-align-anything-with-just-3-lines-of-css/
@mixin vertical-align {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

@mixin grid-media( $size ) {
  @media #{$size} {
    @content;
  }
}

@mixin clearfix {
  &::after {
    clear: both;
    content: "";
    display: block;
  }
}

// Pixels to Rems
$remBaseFontSize: 16;
@function rem($pixels, $context: $remBaseFontSize) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }
  @if (unitless($context)) {
    $context: $context * 1px;
  }
  @return math.div($pixels, $context) * 1rem;
}

// Fluid Type with CSS Locks
@mixin fluid-unit($properties, $min-vw, $max-vw, $min-value, $max-value) {
  @each $property in $properties {
    #{$property}: $min-value;
  }
  @media (min-width: $min-vw) {
    @each $property in $properties {
      #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)});
    }
  }
  @media (min-width: $max-vw) {
    @each $property in $properties {
      #{$property}: $max-value;
    }
  }
}

@function strip-unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return math.div($number, ($number * 0 + 1));
  }
  @return $number;
}
